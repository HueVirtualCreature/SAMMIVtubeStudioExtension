[extension_name]
SAMMIVTubeStudioExtension

[extension_info]
Written by Hue, the Centipede Youkai

[insert_external]
<style type="">
  * {
      box-sizing: border-box;
    }
</style>

<div class="row">
  <p>SAMMIVtubeStudioExtension: Interfaces SAMMI with Denchisoft's VTubeStudio by invoking endpoints on the VTubeStudio API via Commands</p>
</div>
<div class="row">
  <div class="column">
    <img class="hue-img" src="https://i.imgur.com/PXr3Lez.png"></img>
  </div>
  <div class="column">
    <p>Created by Hue, the Centipede Youkai</p> 
    <a href="https://twitter.com/Hue_SwordDevil">Twitter</a>
    <a href="https://github.com/HueVirtualCreature/Lioranboard2VTubeStudioExtension">GitHub</a>
    <p>You may access the commands under Extension Commands > SAMMI Bridge > VTubeStudio*</p>
    <p>Please keep in mind that the Bridge MUST BE OPEN in order for any of its commands to work.</p>
	<button class="btn btn-primary btn-sm" onclick="requestVtubeStudioAuthenticationToken();">Authenticate with VTubeStudio</button>
	<button class="btn btn-primary btn-sm" onclick="requestRefresh();">Refresh Model and Hotkey Lists</button>
  </div>
</div>

[insert_command]
SAMMI.extCommand("VtubeStudio - Move Model",3355443, 52, {
	//TODO My god, no numeric input type
	//Need better default values
	positionX: ["PositionX", 14, "0"],
	positionY: ["PositionY", 14, "0"],
	size: ["Size", 14, "1"],
	rotation: ["Rotation", 14, "0"],
	time: ["Time (0-2)", 14, "0.2"],
	relative: ["Relative Values", 2, false],
	dev_note: ["Dev Note", 0, "This one doesn't work super \nwell mainly because you have to \ndo a lot of trial and error to get \nthe numbers just right....\ngood luck! Changing the \ncontents of this textbox \ndoes nothing, by the way."]
 })

 SAMMI.extCommand("VtubeStudio - Pull Value",3355443, 52, {
	Variable: ["Variable", 14, ""],
	PullValue: ["Pull Value", 19, null, null, ["positionX", "positionY", "size", "rotation", "modelName", "modelID", "modelLoadTime", "timeSinceModelLoaded"]],
	Global: ["Global", 2, false]
 })

[insert_hook]
case "VtubeStudio - Send Hotkey":{
	const hotkey = window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].find(h => LioranBoardJSON.Hotkey === getVTSHotKeyIdentifier(h.hotkeyName, h.modelName));
	if (!!hotkey) {
		requestHotkeyTrigger(hotkey.hotkeyID);
	}
} break

case "VtubeStudio - Load Model":{
	let model = window[`${VTUBESTUDIO_PLUGINNAME}_Models`].find(m => m.modelName === LioranBoardJSON.Model);
	if (!!model) {
		requestLoadModel(model.modelID);
	}
} break

case "VtubeStudio - Move Model":{
	requestMoveModel(LioranBoardJSON.positionX, LioranBoardJSON.positionY, LioranBoardJSON.rotation, LioranBoardJSON.size, LioranBoardJSON.time, LioranBoardJSON.relative);
} break

case "VtubeStudio - Pull Value": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][requestID] = (modelData) => {
		if (!!LioranBoardJSON.Variable) {
			//I think the model position data is inside "modelPosition" proptery, so let's extract it....
			modelData = { ...modelData, ...modelData.modelPosition };
			if (!!modelData[LioranBoardJSON.PullValue]) {
				if (LioranBoardJSON.Global === true) {
					// SAMMIVTS_postSAMMIMessage("Setting " + LioranBoardJSON.Variable + " to " + modelData[LioranBoardJSON.PullValue]);
					SAMMI.setVariable(LioranBoardJSON.Variable, modelData[LioranBoardJSON.PullValue]);
				} else {
					// SAMMIVTS_postSAMMIMessage("Setting " + LioranBoardJSON.FromButton + "." + LioranBoardJSON.Variable + " to " + modelData[LioranBoardJSON.PullValue]);
					SAMMI.setVariable(LioranBoardJSON.Variable, modelData[LioranBoardJSON.PullValue], LioranBoardJSON.FromButton);
				}
			} else {
				SAMMIVTS_postSAMMIMessage("ERROR: Could not find " + LioranBoardJSON.PullValue + " in the received data");
			}
		}
	};
	requestCurrentModelData({requestID: requestID});
} break

[insert_script]
const VTUBESTUDIO_SERVER = 'ws://localhost:8001';
const VTUBESTUDIO_PLUGINNAME = "LioranBoard2VtubeStudioIntegration";
const VTUBESTUDIO_AUTHORNAME = "Hue, the Centipede Youkai";
const VTUBESTUDIO_PLUGIN_ICON64 = null;

window[`${VTUBESTUDIO_PLUGINNAME}_Space`] = {};
window[`${VTUBESTUDIO_PLUGINNAME}_Models`] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_Space`][`${VTUBESTUDIO_PLUGINNAME}_IsAuthenticated`] = false;
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`] = {};
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"] = [];

const generateBaseRequest = (messageType) => {
	return {
		"apiName": "VTubeStudioPublicAPI",
		"apiVersion": "1.0",
		"requestID": uuidv4(),
		"messageType": messageType,
		"data": {
			"pluginName": VTUBESTUDIO_PLUGINNAME,
			"pluginDeveloper": VTUBESTUDIO_AUTHORNAME,
			"authenticationToken": window.VTUBESTUDIO_AUTHTOKEN
		}
	};
}

VTUBESTUDIO_WebSocket_ReadyStates = {
	CONNECTING: 0,
	OPEN: 1,
	CLOSING: 2,
	CLOSED: 3
};

function SAMMIVTS_postSAMMIMessage(message, level = 1) {
	switch(level) {
		case 0:
			SAMMI.notification("VTUBESTUDIO: " + message);
			break;
		case 1:
			SAMMI.alert("VTUBESTUDIO: " + message);
			break;
	}
}

function SAMMIVTS_postConsoleMessage(message) {
	console.debug(`${VTUBESTUDIO_PLUGINNAME}: ${message}`);
}

function getVTSHotKeyIdentifier(hotkeyName, modelName) {
	return `${hotkeyName} - (${modelName})`;
}

function interpretResponse(responseData) {
	if (!responseData) { throw 'interpretResponse: responseData cannot be null!'; }
	SAMMIVTS_postConsoleMessage("Received message " + responseData.messageType);
	switch(responseData.messageType) {
		case "AuthenticationTokenResponse":
			window.VTUBESTUDIO_AUTHTOKEN = responseData.data.authenticationToken;
			//I assume that we want to authenticate afterwards....
			saveTokenToLocalStorage(window.VTUBESTUDIO_AUTHTOKEN);
			requestAuthentication();
			break;
		case "AuthenticationResponse":
			SAMMIVTS_postSAMMIMessage(`Response from server: ${responseData.data.reason}`);
			if (responseData.data.authenticated === false) { //Auth Token failed??? Request a new one
				window[`${VTUBESTUDIO_PLUGINNAME}_Space`][`${VTUBESTUDIO_PLUGINNAME}_IsAuthenticated`] = responseData.data.authenticated;
				requestVtubeStudioAuthenticationToken();
			} else if (responseData.data.authenticated === true) {
				window[`${VTUBESTUDIO_PLUGINNAME}_Space`][`${VTUBESTUDIO_PLUGINNAME}_IsAuthenticated`] = responseData.data.authenticated;
				requestListOfModels();
				//TODO Reactivate when the API is updated
				//requestItemList();
			}
			break;
		case "AvailableModelsResponse":
			SAMMIVTS_postConsoleMessage(`Found ${responseData.data.numberOfModels} models.`);
			window[`${VTUBESTUDIO_PLUGINNAME}_Models`] = responseData.data.availableModels;
			window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = [];

			SAMMI.extCommand("VtubeStudio - Load Model",3355443, 52, { 
				Model: ['Model to Load', 19, null, null, window[`${VTUBESTUDIO_PLUGINNAME}_Models`].map(m => `${m.modelName}`)]
			})
			
			//TODO Eesh, race condition maybe. Find a better way
			for(let index = 0; index < window[`${VTUBESTUDIO_PLUGINNAME}_Models`].length; index++) {
				setTimeout(() => {requestModelHotKeys(responseData.data.availableModels[index].modelID);}, 50);
			}
			break;
		case "HotkeysInCurrentModelResponse":
			SAMMIVTS_postConsoleMessage(`Found ${responseData.data.availableHotkeys.length} hotkeys for ${responseData.data.modelName}`);
			
			window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].concat(responseData.data.availableHotkeys.filter(hotkey => !!hotkey.name && hotkey.name !== "").map(hotkey => { 
				return {
					hotkeyName: hotkey.name, 
					hotkeyID: hotkey.hotkeyID, 
					modelName: responseData.data.modelName
				}; 
			}));

			SAMMI.extCommand("VtubeStudio - Send Hotkey",3355443, 52, {
				Hotkey: ['Hotkey', 19, null, null, window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].map(hotkey => getVTSHotKeyIdentifier(hotkey.hotkeyName, hotkey.modelName))]
			  });
			break;
		case "HotkeyTriggerResponse":
			SAMMIVTS_postSAMMIMessage(`Triggered hotkey`);
			break;
		case "ModelLoadResponse":
			SAMMIVTS_postSAMMIMessage(`Model loaded`);
			break;
		case "MoveModelResponse":
			SAMMIVTS_postSAMMIMessage("Model moved");
			break;
		case "ItemListResponse":
			SAMMIVTS_postSAMMIMessage("ItemListResponse");
			break;
		case "ItemLoadResponse":
			SAMMIVTS_postSAMMIMessage("ItemLoadResponse");
			break;
		case "ItemUnloadResponse":
			SAMMIVTS_postSAMMIMessage("ItemUnloadResponse");
			break;
		case "ItemAnimationControlResponse":
			SAMMIVTS_postSAMMIMessage("ItemAnimationControlResponse");
			break;
		case "ItemMoveResponse":
			//If the request was successful, you will just receive an empty response.
			SAMMIVTS_postSAMMIMessage("Item Moved");
			break;
		case "CurrentModelResponse":
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID] = undefined;
			}
			window[`${VTUBESTUDIO_PLUGINNAME}_CurrentModelData`] = responseData.data; //TODO Need this?
			break;
		case 'APIError':
			SAMMIVTS_postSAMMIMessage("Received an error from the API: " + responseData.data.errorID + ": " + responseData.data.message);
			//Handle Known Errors
			switch(responseData.data.errorID) {
				case 8: 
					//Start Auth loop
					SAMMIVTS_postConsoleMessage("There was a problem with the authenticated session; We'll try to re-authetincate.")
					requestVtubeStudioAuthenticationToken();
					break;
				default:
					break;
			}
			break;
		default:
			SAMMIVTS_postSAMMIMessage("Received an unknown message type: " + responseData.messageType + ". The handler for this event has not been implemented.");
			break;
	}
}

function createVTSWebSocketClient() {
	SAMMIVTS_postSAMMIMessage('Checking client');
	if (!window.VTUBESTUDIO_WebSocket || window.VTUBESTUDIO_WebSocket.readyState === VTUBESTUDIO_WebSocket_ReadyStates.CLOSED) {
		window.VTUBESTUDIO_WebSocket = new WebSocket(VTUBESTUDIO_SERVER);

		//Add Event Handlers
		window.VTUBESTUDIO_WebSocket.onmessage = function(event) {
			if (event.data) {
				const responseData = JSON.parse(event.data);
				interpretResponse(responseData);
			} else {
				SAMMIVTS_postSAMMIMessage("Response data was empty", 1);
			}
		}
		
		window.VTUBESTUDIO_WebSocket.onclose = function(event) {
			SAMMIVTS_postConsoleMessage(`Disconnected(${event.code || "No code provided"}, ${event.reason || "No reason provided"}), reconnecting in 5 seconds`);
			SAMMIVTS_postSAMMIMessage('Socket disconnected, reconnecting in 5 seconds');
			setTimeout(createVTSWebSocketClient, 5000);
		}

		window.VTUBESTUDIO_WebSocket.onopen = function(event) {
			//When the socket opens, send the auth request
			if (!retrieveTokenFromLocalStorage()) {
				requestVtubeStudioAuthenticationToken();
			} else {
				//Do we already have a token...? Use that then...
				window.VTUBESTUDIO_AUTHTOKEN = retrieveTokenFromLocalStorage();
				requestAuthentication();
			}
		}
	}
	else if (window.VTUBESTUDIO_WebSocket.readyState === VTUBESTUDIO_WebSocket_ReadyStates.CLOSING) {
		SAMMIVTS_postConsoleMessage(`Closure pending, waiting 5 seconds to reopen`);
		setTimeout(createVTSWebSocketClient, 5000);
	}
}

function requestVtubeStudioAuthenticationToken() {
	SAMMIVTS_postSAMMIMessage('Plugin is asking for authentication in VTube Studio', 0);
	const request = generateBaseRequest("AuthenticationTokenRequest");
	request.data.pluginIcon = VTUBESTUDIO_PLUGIN_ICON64;
	sendMessageToVtubeStudio(request);
}

function requestAuthentication() {
	sendMessageToVtubeStudio(generateBaseRequest("AuthenticationRequest"));
}

function requestListOfModels() {
	sendMessageToVtubeStudio(generateBaseRequest("AvailableModelsRequest"));
}

function requestModelHotKeys(modelID = null) {
	let request = generateBaseRequest("HotkeysInCurrentModelRequest");
	request.data.modelID = modelID;
	sendMessageToVtubeStudio(request);
}

function requestHotkeyTrigger(hotkeyID) {
	let request = generateBaseRequest("HotkeyTriggerRequest");
	request.data.hotkeyID = hotkeyID;
  	sendMessageToVtubeStudio(request);
}

//TODO Implement this
function requestItemList(hotkeyID) {
	let request = generateBaseRequest("ItemListRequest");
	request.data = {
		...request.data,
		"includeAvailableSpots": true,
		"includeItemInstancesInScene": true,
		"includeAvailableItemFiles": true,
		// "onlyItemsWithFileName": "OPTIONAL_my_item_filename.png",
		// "onlyItemsWithInstanceID": "OPTIONAL_InstanceIdOfItemInScene"
	};
  	sendMessageToVtubeStudio(request);
}

//TODO Implement this
function requestLoadItem(hotkeyID) {
	let request = generateBaseRequest("ItemLoadRequest");
	request.data = {
		...request.data,
		"fileName": "some_item_name.jpg",
		"positionX": 0,
		"positionY": 0.5,
		"size": 0.33,
		"rotation": 90,
		"fadeTime": 0.5,
		"order": 4,
		"failIfOrderTaken": false,
		"smoothing": 0,
		"censored": false,
		"flipped": false,
		"locked": false,
		"unloadWhenPluginDisconnects": true
	};
  	sendMessageToVtubeStudio(request);
}

//TODO Implement this
function requestRemoveItem(hotkeyID) {
	let request = generateBaseRequest("ItemUnloadRequest");
	request.data = {
		...request.data,
		"unloadAllInScene": false,
		"unloadAllLoadedByThisPlugin": false,
		"allowUnloadingItemsLoadedByUserOrOtherPlugins": true,
		"instanceIDs":
		[
			"SomeInstanceIdOfItemToUnload", "SomeOtherInstanceIdOfItemToUnload"
		],
		"fileNames":
		[
			"UnloadAllItemInstancesWithThisFileName", "SomeOtherFileName"
		]
	};
  	sendMessageToVtubeStudio(request);
}

//TODO Implement this
function requestItemAnimationControl(hotkeyID) {
	let request = generateBaseRequest("ItemAnimationControlRequest");
	request.data = {
		...request.data,
		"itemInstanceID": "ItemInstanceId",
		"framerate": 12,
		"frame": 3,
		"brightness": 1,
		"opacity": 1,
		"setAutoStopFrames": true,
		"autoStopFrames": [0, 7, 26],
		"setAnimationPlayState": true,
		"animationPlayState": true
	};
  	sendMessageToVtubeStudio(request);
}

//TODO Implement this
function requestItemMove(hotkeyID) {
	let request = generateBaseRequest("ItemMoveRequest");
	request.data = {
		...request.data,
		"itemInstanceID": "ItemInstanceId",
		"timeInSeconds": 1,	
		"fadeMode": "easeOut",
		"positionX": 0.2,
		"positionY": -0.8,
		"size": 0.6,
		"rotation": 180,
		"setFlip": true,
		"flip": false,
		"userCanStop": true	
	}
  	sendMessageToVtubeStudio(request);
}

function requestLoadModel(modelID) {
	if (!modelID) { throw "modelID cannot be null or undefined" }
	let request = generateBaseRequest("ModelLoadRequest");
	request.data.modelID = modelID;
	sendMessageToVtubeStudio(request);
}

function requestMoveModel(posX = null, posY = null, rotation = null, size = null, time = 0.2, relativeValues = false) {
	SAMMIVTS_postConsoleMessage(`Moving model: ${posX}/${posY}/${rotation}/${size}/${time}/${relativeValues}`);
	let request = generateBaseRequest("MoveModelRequest");
	request.data = {
		timeInSeconds: time,
		valuesAreRelativeToModel: relativeValues,
		positionX: posX,
		positionY: posY,
		rotation: rotation,
		size: size,
	}
	sendMessageToVtubeStudio(request);
}

function sendMessageToVtubeStudio(request) {
	//TODO Need better retry logic, maybe implement a queuing system? Also, how do you spell that word?
	//TODO Check for auth status
	//if (window[`${VTUBESTUDIO_PLUGINNAME}_Space`][`${VTUBESTUDIO_PLUGINNAME}_IsAuthenticated`] === true) {}
	if (window.VTUBESTUDIO_WebSocket) {
		if ( window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.OPEN) {
			const str = JSON.stringify(request);
			const bytes = new TextEncoder().encode(str);
			const blob = new Blob([bytes], {
				type: "application/json;charset=utf-8"
			});
			window.VTUBESTUDIO_WebSocket.send(blob);
		} else { //Socket was not open???!!!?!?! Uh......;;;;
			SAMMIVTS_postSAMMIMessage('Connection pending(' + window.VTUBESTUDIO_WebSocket.readyState + ')');
			if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.CLOSING) {
				setTimeout(createVTSWebSocketClient, 5000);
			} else if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.CLOSED) {
				createVTSWebSocketClient();
			} else if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.OPENING) {
				setTimeout(() => { sendMessageToVtubeStudio(request); }, 3000);
			}
		}
	} else {
		SAMMIVTS_postSAMMIMessage(`Websocket not instantiated`);
		createVTSWebSocketClient();
	}
};

function requestRefresh() {
	SAMMIVTS_postSAMMIMessage("Refreshing model and hotkey list");
	requestListOfModels();
}

function requestCurrentModelData(obj) {
	let request = generateBaseRequest("CurrentModelRequest");
	request = {...request, ...obj};
	sendMessageToVtubeStudio(request);
}

function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

const LOCALSTORAGE_AUTHTOKENKEY = "LB2_VTUBESTUDIO_AUTHTOKEN";

//FIXME Must encrypt this token to keep safe.
function saveTokenToLocalStorage(authToken) {
	localStorage.setItem(LOCALSTORAGE_AUTHTOKENKEY, authToken);
}

function retrieveTokenFromLocalStorage() {
	return localStorage.getItem(LOCALSTORAGE_AUTHTOKENKEY);
}

SAMMIVTS_postSAMMIMessage("Initializing...");
createVTSWebSocketClient();
[insert_over]
