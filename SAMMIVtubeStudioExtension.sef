[extension_name]
SAMMIVTubeStudioExtension

[extension_info]
Written by Hue, the Centipede Youkai

[insert_external]
<style type="">
  * {
      box-sizing: border-box;
    }
</style>

<div class="row">
  <p>SAMMIVtubeStudioExtension: Interfaces SAMMI with Denchisoft's VTubeStudio by invoking endpoints on the VTubeStudio API via Commands</p>
</div>
<div class="row">
  <div class="column">
    <img class="hue-img" src="https://i.imgur.com/PXr3Lez.png"></img>
  </div>
  <div class="column">
    <p>Created by Hue, the Centipede Youkai</p> 
    <a href="https://twitter.com/Hue_SwordDevil">Twitter</a>
    <a href="https://github.com/HueVirtualCreature/SAMMIVtubeStudioExtension">GitHub</a>
    <p>You may access the commands under Extension Commands > SAMMI Bridge > VTubeStudio*</p>
    <p>Please keep in mind that the Bridge MUST BE OPEN in order for any of its commands to work.</p>
    <p>Version: v1.3.0.0</p>
	<button class="btn btn-primary btn-sm" onclick="requestRefresh();">Refresh Model and Hotkey Lists</button>
  </div>
</div>

[insert_command]

[insert_hook]
case "VtubeStudio - Request Token":{
	//Request a token from the VTS server and save the token it replies with to a Global variable
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"][requestID] = (data) => {
		SAMMI.setVariable("SAMMIVtubeStudioExtension_AuthToken", data.authenticationToken || undefined); //Hardcoded to save to Global
	};
	createVTSWebSocketClient(() => {requestVtubeStudioAuthenticationToken({requestID: requestID});});
} break

case "VtubeStudio - Authenticate":{
	//Send a request to the 
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"][requestID] = (data) => {
		if (data.authenticated == false) SAMMIVTS_postConsoleMessage("The VTS server failed to authenticate the extension");
		SAMMI.setVariable("SAMMIVtubeStudioExtension_IsAuthenticated", data.authenticated || false); //Hardcoded to save to Global
	};
	createVTSWebSocketClient(() => { requestAuthentication({requestID: requestID}); });
	
} break

case "VtubeStudio - Send Hotkey":{
	const hotkey = window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].find(h => LioranBoardJSON.Hotkey.toLowerCase() === getVTSHotKeyIdentifier(h.hotkeyName.toLowerCase(), h.modelName.toLowerCase()));
	if (!!hotkey) {
		requestHotkeyTrigger(hotkey.hotkeyID);
	}
} break

case "VtubeStudio - Load Model":{
	let model = window[`${VTUBESTUDIO_PLUGINNAME}_Models`].find(m => m.modelName === LioranBoardJSON.Model);
	if (!!model) {
		requestLoadModel(model.modelID);
	}
} break

case "VtubeStudio - Move Model":{
	requestMoveModel(LioranBoardJSON.positionX, LioranBoardJSON.positionY, LioranBoardJSON.rotation, LioranBoardJSON.size, LioranBoardJSON.time, LioranBoardJSON.relative);
} break

case "VtubeStudio - Pull Value": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][requestID] = (modelData) => {
		if (!!LioranBoardJSON.Variable) {
			//I think the model position data is inside "modelPosition" proptery, so let's extract it....
			modelData = { ...modelData, ...modelData.modelPosition };
			let buttonID = 'global';
			if (LioranBoardJSON.Global !== true) {buttonID = LioranBoardJSON.FromButton;}
			if (!LioranBoardJSON.PullValue || LioranBoardJSON.PullValue == "") {SAMMI.setVariable(LioranBoardJSON.Variable, modelData, buttonID); return;}
			SAMMI.setVariable(LioranBoardJSON.Variable, modelData[LioranBoardJSON.PullValue] || undefined, buttonID);
		}
	};
	requestCurrentModelData({requestID: requestID});
} break

case "VtubeStudio - Get Items List": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"][requestID] = (data) => {
		if (!!LioranBoardJSON.Variable) {
			let buttonID = LioranBoardJSON.FromButton;
			SAMMI.setVariable(LioranBoardJSON.Variable, data, buttonID);
			return;
		}
	};
	requestItemList({requestID: requestID}, LioranBoardJSON.includeAvailableSpots, 
		LioranBoardJSON.includeItemInstancesInScene, LioranBoardJSON.includeAvailableItemFiles, 
		LioranBoardJSON.onlyItemsWithFileName, LioranBoardJSON.onlyItemsWithInstanceID);
} break

case "VtubeStudio - Load Item": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"][requestID] = (data) => {
		if (!!LioranBoardJSON.variable) {
			let buttonID = LioranBoardJSON.FromButton;
			SAMMI.setVariable(LioranBoardJSON.variable, data, buttonID);
			return;
		}
	};

	const {
		fileName,
		positionX,
		positionY,
		size,
		rotation,
		fadeTime,
		order,
		failIfOrderTaken,
		smoothing,
		censored,
		flipped,
		locked,
		unloadWhenPluginDisconnects
	} = LioranBoardJSON;
	requestLoadItem({
		requestID,
		fileName,
		positionX,
		positionY,
		size,
		rotation,
		fadeTime,
		order,
		failIfOrderTaken,
		smoothing,
		censored,
		flipped,
		locked,
		unloadWhenPluginDisconnects
	});

} break

case "VtubeStudio - Remove Item": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"][requestID] = (data) => {
		if (!!LioranBoardJSON.variable) {
			let buttonID = LioranBoardJSON.FromButton;
			SAMMI.setVariable(LioranBoardJSON.variable, data, buttonID);
			return;
		}
	};
	const {
		unloadAllInScene,
		unloadAllLoadedByThisPlugin,
		allowUnloadingItemsLoadedByUserOrOtherPlugins,
		instanceIDs: instanceIDsArrayName,
		fileNames: fileNamesArrayName
	} = LioranBoardJSON;

	SAMMI.getVariable(instanceIDsArrayName, LioranBoardJSON.FromButton).then(instanceIDs => {
		SAMMI.getVariable(fileNamesArrayName, LioranBoardJSON.FromButton).then(fileNames => {
			requestRemoveItem({
				requestID,
				unloadAllInScene,
				unloadAllLoadedByThisPlugin,
				allowUnloadingItemsLoadedByUserOrOtherPlugins,
				instanceIDs: instanceIDs.value,
				fileNames: fileNames.value
			});
		});
	});
} break

case "VtubeStudio - Control Animation": {
	const requestID = uuidv4();
	//TODO Do we need this? What are the return variables?
	// window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"][requestID] = (data) => {
	// 	if (!!LioranBoardJSON.variable) {
	// 		let buttonID = LioranBoardJSON.FromButton;
	// 		SAMMI.setVariable(LioranBoardJSON.variable, data, buttonID);
	// 		return;
	// 	}
	// };

	const {
		itemInstanceID,
		framerate,
		frame,
		brightness,
		opacity,
		setAutoStopFrames,
		autoStopFrames,
		setAnimationPlayState,
		animationPlayState
	} = LioranBoardJSON;

	if (autoStopFrames && autoStopFrames !== "") {
		SAMMI.getVariable(autoStopFrames, LioranBoardJSON.FromButton).then(autoStopFramesVariable => {
			requestItemAnimationControl({
				requestID,
				itemInstanceID,
				framerate,
				frame,
				brightness,
				opacity,
				setAutoStopFrames,
				autoStopFrames: autoStopFramesVariable.value,
				setAnimationPlayState,
				animationPlayState
			});
		});
		return;
	}
	
	requestItemAnimationControl({
		requestID,
		itemInstanceID,
		framerate,
		frame,
		brightness,
		opacity,
		setAutoStopFrames,
		autoStopFrames: null,
		setAnimationPlayState,
		animationPlayState
	});
} break

case "VtubeStudio - Move Item": {
	const requestID = uuidv4();
	//TODO Do we need this? What are the return variables?
	// window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"][requestID] = (data) => {
	// 	if (!!LioranBoardJSON.variable) {
	// 		let buttonID = LioranBoardJSON.FromButton;
	// 		SAMMI.setVariable(LioranBoardJSON.variable, data, buttonID);
	// 		return;
	// 	}
	// };

	const {
		itemsToMove: itemsToMoveVariableName
	} = LioranBoardJSON;

	if (itemsToMoveVariableName && itemsToMoveVariableName !== "") {
		SAMMI.getVariable(itemsToMoveVariableName, LioranBoardJSON.FromButton).then(itemsToMoveVariable => {
			requestItemMove({
				requestID,
				itemsToMove: itemsToMoveVariable.value
			});
		});
		return;
	}
} break

case "VtubeStudio - Get VTS Info": {
	const requestID = uuidv4();
	window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"][requestID] = (data) => {
		if (!!LioranBoardJSON.variable) {
			let buttonID = LioranBoardJSON.FromButton;
			if (!LioranBoardJSON.pullValue || LioranBoardJSON.pullValue == "") {SAMMI.setVariable(LioranBoardJSON.variable, data, buttonID); return;}
			SAMMI.setVariable(LioranBoardJSON.variable, data[LioranBoardJSON.pullValue] || undefined, buttonID);
		}
	};
	requestVTSStats({requestID: requestID});
} break

[insert_script]
const VTUBESTUDIO_SERVER = 'ws://localhost:8001';
const VTUBESTUDIO_PLUGINNAME = "SAMMIVtubeStudioExtension";
const VTUBESTUDIO_AUTHORNAME = "Hue_vCreature";
const VTUBESTUDIO_PLUGIN_ICON64 = `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`;

window[`${VTUBESTUDIO_PLUGINNAME}_Space`] = {};
window[`${VTUBESTUDIO_PLUGINNAME}_Models`] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`] = {};
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"] = [];
window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"] = [];

VTUBESTUDIO_WebSocket_ReadyStates = { CONNECTING: 0, OPEN: 1, CLOSING: 2, CLOSED: 3 };

//Inserts base extension commands into SAMMI
function SAMMIVTS_insertBaseCommands() {
	const vtsStatsProps = [
		"*leave blank to save entire response*",
		"uptime",
		"framerate",
		"vTubeStudioVersion",
		"allowedPlugins",
		"connectedPlugins",
		"startedWithSteam",
		"windowWidth",
		"windowHeight",
		"windowIsFullscreen",
	];

	const commonModelDataProps = [
		"*leave blank to save entire response*",
		"modelID", 
		"modelName", 
		"modelPosition", 
		"positionX", 
		"positionY", 
		"size", 
		"rotation", 
		"modelLoaded", 
		"modelLoadTime", 
		"hasPhysicsFile", 
		"timeSinceModelLoaded"
	];

	//This is used to trigger the initial authentication
	SAMMI.extCommand("VtubeStudio - Request Token",3355443, 52, {
		//Token: ["Save Token to Variable", 14, ""] //When the server responds with the auth token, save to global OR user-defined variable
		dev_note: ["Dev Note", 0, "This is used to request a token from vTubestudio. The server will return with a token and save that to a global variable"]
	});

	//This is used to trigger the initial authentication
	SAMMI.extCommand("VtubeStudio - Authenticate",3355443, 52, {
		//Token: ["Save Token to Variable", 14, ""] //When the server responds with the auth token, save to global OR user-defined variable
		dev_note: ["Dev Note", 0, "This is used to authenticate with vTubestudio. The auth state will be saved to global"]
	});

	SAMMI.extCommand("VtubeStudio - Move Model",3355443, 52, {
		//Need better default values
		positionX: ["PositionX", 14, "0"],
		positionY: ["PositionY", 14, "0"],
		size: ["Size", 14, "-50.0"],
		rotation: ["Rotation", 14, "360"],
		time: ["Time (0-2)", 14, "0.5"],
		relative: ["Relative Values", 2, false],
		dev_note: ["Dev Note", 0, "This one doesn't work super \nwell mainly because you have to \ndo a lot of trial and error to get \nthe numbers just right....\ngood luck! Changing the \ncontents of this textbox \ndoes nothing, by the way."]
	 });
	
	
	 SAMMI.extCommand("VtubeStudio - Pull Value",3355443, 52, {
		Variable: ["Variable", 14, ""],
		PullValue: ["Pull Value", 20, "", null, commonModelDataProps],
		Global: ["Global", 2, false]
	});

	SAMMI.extCommand("VtubeStudio - Get Items List",3355443, 80, {
		Variable: ["Variable", 14, ""],
		includeAvailableSpots: ["includeAvailableSpots", 2, false],
		includeItemInstancesInScene: ["includeItemInstancesInScene", 2, false],
		includeAvailableItemFiles: ["includeAvailableItemFiles", 2, false],
		onlyItemsWithFileName: ["onlyItemsWithFileName", 14, ""],
		onlyItemsWithInstanceID: ["onlyItemsWithInstanceID", 14, ""]
	});

	SAMMI.extCommand("VtubeStudio - Load Item",3355443, 80, {
		variable: ["variable", 14, ""],
		fileName: ["fileName", 14, ""],
		positionX: ["positionX", 14, "0"],
		positionY: ["positionY", 14, "0.5"],
		size: ["size", 14, "0.33"],
		rotation: ["rotation", 14, "90"],
		fadeTime: ["fadeTime", 14, "0.5"],
		order: ["order", 14, "4"],
		failIfOrderTaken: ["failIfOrderTaken", 2, false],
		smoothing: ["smoothing", 14, "0.5"],
		censored: ["censored", 2, false],
		flipped: ["flipped", 2, false],
		locked: ["locked", 2, false],
		unloadWhenPluginDisconnects: ["unloadWhenPluginDisconnects", 2, true]
	});

	SAMMI.extCommand("VtubeStudio - Remove Item",3355443, 80, {
		variable: ["Variable", 14, ""],
		unloadAllInScene: ["unloadAll", 2, false],
		unloadAllLoadedByThisPlugin: ["unloadAllItemsFromSAMMI", 2, false],
		allowUnloadingItemsLoadedByUserOrOtherPlugins: ["allowUnloadingItemsFromOutsideSAMMI", 2, true],
		instanceIDs: ["instanceIDsArrayName", 14, ""],
		fileNames: ["fileNamesArrayName", 14, ""]
	});

	SAMMI.extCommand("VtubeStudio - Control Animation",3355443, 80, {
		variable: ["Variable (Not used)", 14, ""],
		itemInstanceID: ["itemInstanceID", 14, ""],
		framerate: ["framerate", 14, "12"],
		frame: ["frame", 14, "0"],
		brightness: ["brightness", 14, "1"],
		opacity: ["opacity", 14, "1"],
		setAutoStopFrames: ["setAutoStopFrames", 2, false],
		autoStopFrames: ["autoStopFrames", 14, ""],
		setAnimationPlayState: ["setAnimationPlayState", 2, true],
		animationPlayState: ["animationPlayState", 2, true]
	});

	//TODO Can we make this better?
	SAMMI.extCommand("VtubeStudio - Move Item",3355443, 80, {
		variable: ["Variable (Not used)", 14, ""],
		itemsToMove: ["itemsToMove Variable Name", 14, ""],
		dev_note: ["Request model", 0, `{\n"itemInstanceID": "ItemInstanceId",\n"timeInSeconds": 1,\n"fadeMode": "easeOut",\n"positionX": 0.2,\n"positionY": -0.8,\n"size": 0.6,\n"rotation": 180,\n"order": -1000,\n"setFlip": true,\n"flip": false,\n"userCanStop": true\n}`]
	});

	SAMMI.extCommand("VtubeStudio - Get VTS Info",3355443, 30, {
		variable: ["Save Into Variable", 14, ""],
		pullValue: ["Pull Value", 20, "", null, vtsStatsProps],
	});
}

//This is the master logic for recieving responses from the VTS server
function interpretResponse(responseData) {
	if (!responseData) { throw 'interpretResponse: responseData cannot be null!'; }
	SAMMIVTS_postConsoleMessage("Received message " + responseData.messageType);
	switch(responseData.messageType) {
		case "AuthenticationTokenResponse":
			window.VTUBESTUDIO_AUTHTOKEN = responseData.data.authenticationToken;
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Request Token"][responseData.requestID] = undefined;
			}
			break;
		case "AuthenticationResponse":
			SAMMIVTS_postSAMMIMessage(`Response from server: ${responseData.data.reason}`);

			window.VTUBESTUDIO_AUTHTOKEN = responseData.data.authenticationToken;
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Authenticate"][responseData.requestID] = undefined;
			}

			if (responseData.data.authenticated === true) {
				requestListOfModels();
				//TODO Reactivate when the API is updated
				//requestItemList();
			}
			break;
		case "AvailableModelsResponse":
			SAMMIVTS_postConsoleMessage(`Found ${responseData.data.numberOfModels} models.`);
			window[`${VTUBESTUDIO_PLUGINNAME}_Models`] = responseData.data.availableModels;
			window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = [];

			SAMMI.extCommand("VtubeStudio - Load Model",3355443, 52, { 
				Model: ['Model to Load', 19, null, null, window[`${VTUBESTUDIO_PLUGINNAME}_Models`].map(m => `${m.modelName}`)]
			})
			
			//TODO Eesh, race condition maybe. Find a better way
			for(let index = 0; index < window[`${VTUBESTUDIO_PLUGINNAME}_Models`].length; index++) {
				setTimeout(() => {requestModelHotKeys(responseData.data.availableModels[index].modelID);}, 50);
			}
			break;
		case "HotkeysInCurrentModelResponse":
			SAMMIVTS_postConsoleMessage(`Found ${responseData.data.availableHotkeys.length} hotkeys for ${responseData.data.modelName}`);
			
			window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`] = window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].concat(responseData.data.availableHotkeys.filter(hotkey => !!hotkey.name && hotkey.name !== "").map(hotkey => { 
				return {
					hotkeyName: hotkey.name.toLowerCase(), 
					hotkeyID: hotkey.hotkeyID, 
					modelName: responseData.data.modelName.toLowerCase()
				}; 
			}));

			SAMMI.extCommand("VtubeStudio - Send Hotkey",3355443, 52, {
				Hotkey: ['Hotkey', 19, null, null, window[`${VTUBESTUDIO_PLUGINNAME}_HotKeys`].map(hotkey => getVTSHotKeyIdentifier(hotkey.hotkeyName.toLowerCase(), hotkey.modelName.toLowerCase()))]
			  });
			break;
		case "HotkeyTriggerResponse":
			SAMMIVTS_postSAMMIMessage(`Triggered hotkey`);
			break;
		case "ModelLoadResponse":
			SAMMIVTS_postSAMMIMessage(`Model loaded`);
			break;
		case "MoveModelResponse":
			SAMMIVTS_postSAMMIMessage("Model moved");
			break;
		case "ItemListResponse":
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get Items List"][responseData.requestID] = undefined;
			}
			break;
		case "ItemLoadResponse":
			if (responseData.data && responseData.data.instanceID) {
				SAMMIVTS_postConsoleMessage("ItemListResponse SUCCESS: " + responseData.data.instanceID)
				if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"] 
					&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"][responseData.requestID]) {
						window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"][responseData.requestID](responseData.data.instanceID);
						window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Load Item"][responseData.requestID] = undefined;
				}
			}
			break;
		case "ItemUnloadResponse":
			if (responseData.data && responseData.data.unloadedItems) {
				SAMMIVTS_postConsoleMessage("ItemUnloadResponse SUCCESS: " + responseData.data.unloadedItems)
				if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"] 
					&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"] [responseData.requestID]) {
						window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"] [responseData.requestID](responseData.data.instanceID);
						window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Remove Item"] [responseData.requestID] = undefined;
				}
			}
			break;
		case "ItemAnimationControlResponse":
			if (responseData.data && responseData.data.animationPlaying !== undefined) {
				SAMMIVTS_postSAMMIMessage("ItemAnimationControlResponse SUCCESS");
			}
			break;
		case "ItemMoveResponse":
			if (responseData.data && responseData.data.movedItems) {
				SAMMIVTS_postSAMMIMessage("ItemMoveResponse SUCCESS");
			}
			break;
		case "CurrentModelResponse":
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Pull Value"][responseData.requestID] = undefined;
			}
			break;
		case "StatisticsResponse":
			if (!!window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"] 
			&& window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"][responseData.requestID]) {
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"][responseData.requestID](responseData.data);
				window[`${VTUBESTUDIO_PLUGINNAME}_OnMessageRecievedFunctions`]["VtubeStudio - Get VTS Info"][responseData.requestID] = undefined;
			}
			break;
		case 'APIError':
			SAMMIVTS_postSAMMIMessage("Received an error from the API: " + responseData.data.errorID + ": " + responseData.data.message);
			break;
		default:
			SAMMIVTS_postSAMMIMessage("Received an unknown message type: " + responseData.messageType + ". The handler for this event has not been implemented.");
			break;
	}
}

//Create the socket by which to faciliate comms with VTS with
function createVTSWebSocketClient(callback = null) {
	SAMMIVTS_postSAMMIMessage('Checking client');
	if (!window.VTUBESTUDIO_WebSocket || window.VTUBESTUDIO_WebSocket.readyState === VTUBESTUDIO_WebSocket_ReadyStates.CLOSED) {
		window.VTUBESTUDIO_WebSocket = new WebSocket(VTUBESTUDIO_SERVER);

		//Add Event Handlers
		window.VTUBESTUDIO_WebSocket.onmessage = function(event) {
			if (event.data) {
				const responseData = JSON.parse(event.data);
				interpretResponse(responseData);
			} else {
				SAMMIVTS_postSAMMIMessage("Response data was empty", 1);
			}
		}
		
		window.VTUBESTUDIO_WebSocket.onclose = function(event) {
			SAMMIVTS_postConsoleMessage(`Disconnected(${event.code || "No code provided"}, ${event.reason || "No reason provided"}), reconnecting in 5 seconds`);
			SAMMIVTS_postSAMMIMessage('Socket disconnected, reconnecting in 5 seconds');
			setTimeout(createVTSWebSocketClient, 5000);
		}

		window.VTUBESTUDIO_WebSocket.onopen = function(event) {
			if (callback) callback();
		}
		return;
	}
	else if (window.VTUBESTUDIO_WebSocket.readyState === VTUBESTUDIO_WebSocket_ReadyStates.CLOSING) {
		SAMMIVTS_postConsoleMessage(`Closure pending, waiting 5 seconds to reopen`);
		setTimeout(() => { createVTSWebSocketClient(callback); }, 5000);
		return;
	}

	if (callback) callback();
}

//#region Request Functions for VTS
function sendMessageToVtubeStudio(request) {
	//TODO Need better retry logic, maybe implement a queuing system? Also, how do you spell that word?
	//TODO Check for auth status
	if (window.VTUBESTUDIO_WebSocket) {
		if ( window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.OPEN) {
			const str = JSON.stringify(request);
			const bytes = new TextEncoder().encode(str);
			const blob = new Blob([bytes], {
				type: "application/json;charset=utf-8"
			});
			window.VTUBESTUDIO_WebSocket.send(blob);
		} else { //Socket was not open???!!!?!?! Uh......;;;;
			SAMMIVTS_postSAMMIMessage('Connection pending(' + window.VTUBESTUDIO_WebSocket.readyState + ')');
			if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.CLOSING) {
				setTimeout(createVTSWebSocketClient, 5000);
			} else if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.CLOSED) {
				createVTSWebSocketClient();
			} else if (window.VTUBESTUDIO_WebSocket.readyState == VTUBESTUDIO_WebSocket_ReadyStates.OPENING) {
				setTimeout(() => { sendMessageToVtubeStudio(request); }, 3000);
			}
		}
	} else {
		SAMMIVTS_postSAMMIMessage(`Websocket not instantiated`);
		createVTSWebSocketClient();
	}
};

async function requestVtubeStudioAuthenticationToken({requestID}) {
	SAMMIVTS_postSAMMIMessage('Plugin is asking for authentication in VTube Studio', 0);
	const request = await SAMMIVTS_generateBaseRequest("AuthenticationTokenRequest");
	request.requestID = requestID;
	request.data.pluginIcon = VTUBESTUDIO_PLUGIN_ICON64;
	sendMessageToVtubeStudio(request);
}

async function requestAuthentication({requestID}) {
	let request = await SAMMIVTS_generateBaseRequest("AuthenticationRequest");
	request.requestID = requestID;
	sendMessageToVtubeStudio(request);
}

async function requestListOfModels() {
	let request = await SAMMIVTS_generateBaseRequest("AvailableModelsRequest");
	sendMessageToVtubeStudio(request);

}

async function requestModelHotKeys(modelID = null) {
	let request = await SAMMIVTS_generateBaseRequest("HotkeysInCurrentModelRequest");
	request.data.modelID = modelID;
	sendMessageToVtubeStudio(request);
}

async function requestHotkeyTrigger(hotkeyID) {
	let request = await SAMMIVTS_generateBaseRequest("HotkeyTriggerRequest");
	request.data.hotkeyID = hotkeyID;
  	sendMessageToVtubeStudio(request);
}

async function requestItemList(obj, includeAvailableSpots = false, includeItemInstancesInScene = false, includeAvailableItemFiles = false, onlyItemsWithFileName = "", onlyItemsWithInstanceID = "") {
	let request = await SAMMIVTS_generateBaseRequest("ItemListRequest");
	request = {...request, ...obj};
	request.data = {
		...request.data,
		"includeAvailableSpots": includeAvailableSpots,
		"includeItemInstancesInScene": includeItemInstancesInScene,
		"includeAvailableItemFiles": includeAvailableItemFiles,
		"onlyItemsWithFileName": onlyItemsWithFileName,
		"onlyItemsWithInstanceID": onlyItemsWithInstanceID
	};
  	sendMessageToVtubeStudio(request);
}

async function requestLoadItem(
	{
		requestID,
		fileName,
		positionX,
		positionY,
		size,
		rotation,
		fadeTime,
		order,
		failIfOrderTaken,
		smoothing,
		censored,
		flipped,
		locked,
		unloadWhenPluginDisconnects
	} = { 
		positionX: 0,
		positionY: 0.5,
		size: 0.33,
		rotation: 90,
		fadeTime: 0.5,
		order: 4,
		failIfOrderTaken: false,
		smoothing: 0,
		censored: false,
		flipped: false,
		locked: false,
		unloadWhenPluginDisconnects: true 
	}) {

	if (!fileName) return;
	let request = await SAMMIVTS_generateBaseRequest("ItemLoadRequest");
	request.requestID = requestID;
	request.data = {
		...request.data,
		fileName,
		positionX,
		positionY,
		size,
		rotation,
		fadeTime,
		order,
		failIfOrderTaken,
		smoothing,
		censored,
		flipped,
		locked,
		unloadWhenPluginDisconnects
	};
  	sendMessageToVtubeStudio(request);
}

async function requestRemoveItem({
	requestID,
	unloadAllInScene,
	unloadAllLoadedByThisPlugin,
	allowUnloadingItemsLoadedByUserOrOtherPlugins,
	instanceIDs,
	fileNames
} = {
	unloadAllInScene: false,
	unloadAllLoadedByThisPlugin: false,
	allowUnloadingItemsLoadedByUserOrOtherPlugins: true,
	instanceIDs: [],
	fileNames: []
}) {
	let request = await SAMMIVTS_generateBaseRequest("ItemUnloadRequest");
	request.requestID = requestID;
	request.data = {
		...request.data,
		unloadAllInScene,
		unloadAllLoadedByThisPlugin,
		allowUnloadingItemsLoadedByUserOrOtherPlugins,
		instanceIDs,
		fileNames
	};
  	sendMessageToVtubeStudio(request);
}

async function requestItemAnimationControl({
	requestID,
	itemInstanceID,
	framerate,
	frame,
	brightness,
	opacity,
	setAutoStopFrames,
	autoStopFrames,
	setAnimationPlayState,
	animationPlayState
  } = {
	framerate: 12,
	frame: 3,
	brightness: 1,
	opacity: 1,
	setAutoStopFrames: true,
	autoStopFrames: [
	  0,
	  7,
	  26
	],
	setAnimationPlayState: true,
	animationPlayState: true
  }
  ) {
	let request = await SAMMIVTS_generateBaseRequest("ItemAnimationControlRequest");
	request.requestID = requestID;
	request.data = {
		...request.data,
		itemInstanceID,
		framerate,
		frame,
		brightness,
		opacity,
		setAutoStopFrames,
		autoStopFrames,
		setAnimationPlayState,
		animationPlayState
	};
  	sendMessageToVtubeStudio(request);
}

async function requestItemMove({requestID, itemsToMove}) {
	if (itemsToMove.length < 1) return;
	if (typeof itemsToMove[0] == "string") itemsToMove = itemsToMove.map(e => { return JSON.parse(e) });
	let request = await SAMMIVTS_generateBaseRequest("ItemMoveRequest");
	request.requestID = requestID;
	request.data = {
		...request.data,
		itemsToMove
	}
  	sendMessageToVtubeStudio(request);
}

async function requestLoadModel(modelID) {
	if (!modelID) { throw "modelID cannot be null or undefined" }
	let request = await SAMMIVTS_generateBaseRequest("ModelLoadRequest");
	request.data.modelID = modelID;
	sendMessageToVtubeStudio(request);
}

async function requestMoveModel(posX = null, posY = null, rotation = null, size = null, time = 0.2, relativeValues = false) {
	//TODO Readd this 
	//SAMMIVTS_postConsoleMessage(`Moving model: ${posX}/${posY}/${rotation}/${size}/${time}/${relativeValues}`);
	let request = await SAMMIVTS_generateBaseRequest("MoveModelRequest");
	request.data = {
		timeInSeconds: time,
		valuesAreRelativeToModel: relativeValues,
		positionX: posX,
		positionY: posY,
		rotation: rotation,
		size: size,
	}
	sendMessageToVtubeStudio(request);
}

async function requestCurrentModelData(obj) {
	let request = await SAMMIVTS_generateBaseRequest("CurrentModelRequest");
	request = {...request, ...obj};
	sendMessageToVtubeStudio(request);
}

async function requestVTSStats({requestID}) {
	let request = await SAMMIVTS_generateBaseRequest("StatisticsRequest");
	request.requestID = requestID;
  	sendMessageToVtubeStudio(request);
}

function requestRefresh() {
	SAMMIVTS_postSAMMIMessage("Refreshing model and hotkey list");
	requestListOfModels();
}
//#endregion End Request Functions for VTS

//#region Helper Functions
async function SAMMIVTS_getVTSAuthToken() {
	let token = null;
	await SAMMI.getVariable("SAMMIVtubeStudioExtension_AuthToken", "global").then(tokenObj => {
		token = tokenObj.Value;
	});
	return token;
}

async function SAMMIVTS_generateBaseRequest (messageType) {
	let token = await SAMMIVTS_getVTSAuthToken();
	return {
		"apiName": "VTubeStudioPublicAPI",
		"apiVersion": "1.0",
		"requestID": uuidv4(),
		"messageType": messageType,
		"data": {
			"pluginName": VTUBESTUDIO_PLUGINNAME,
			"pluginDeveloper": VTUBESTUDIO_AUTHORNAME,
			"pluginIcon": VTUBESTUDIO_PLUGIN_ICON64,
			"authenticationToken": token //window.VTUBESTUDIO_AUTHTOKEN
		}
	};
}

function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function SAMMIVTS_postSAMMIMessage(message, level = 1) {
	switch(level) {
		case 0:
			SAMMI.notification("VTUBESTUDIO: " + message);
			break;
		case 1:
			SAMMI.alert("VTUBESTUDIO: " + message);
			break;
	}
}

function SAMMIVTS_postConsoleMessage(message) {
	console.debug(`${VTUBESTUDIO_PLUGINNAME}: ${message}`);
}

function getVTSHotKeyIdentifier(hotkeyName, modelName) {
	return `${hotkeyName.toLowerCase()} - (${modelName.toLowerCase()})`;
}
//#endregion  Helper Functions

function SAMMIVTS_initialize() {
	if (sammiclient) {
		SAMMIVTS_postSAMMIMessage("Started");
		SAMMIVTS_insertBaseCommands();
		return;
	}

	if (!sammiclient) {
		setTimeout(SAMMIVTS_initialize, 1000);
		return;
	}
}

SAMMIVTS_initialize();
[insert_over]